rules_version = '2';
service cloud.firestore {
 match /databases/{database}/documents {

   match /users/{userId} {
     allow read: if request.auth != null; // Allow all authenticated users to view user profiles
     allow write: if request.auth != null && request.auth.uid == userId;
   }

   match /products/{productId} {
     allow read: if true;
     allow create: if request.auth != null; // Allow authenticated users to create new products
     allow update: if request.auth != null && 
                   (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'Admin' || 
                    request.auth.uid == resource.data.PosterID) && 
                   (request.resource.data.keys().hasOnly(['Price', 'Stock']) || 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'Admin'); // Allow users to update Price and Stock of their own products
     allow delete: if request.auth != null && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'Admin';
   }

   match /users/{userId}/cart/{cartItemId} {
     allow read, write: if request.auth != null && request.auth.uid == userId;
   }

   match /products/{productId}/reviews/{reviewId} {
     allow read: if true;
     allow create: if request.auth != null;
     allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
   }

   match /post/{postId} {
      allow read: if request.auth != null; // Allow all authenticated users to view posts
      allow create: if request.auth != null && request.auth.uid == request.resource.data.PosterID; // Allow users to create posts
      allow delete: if request.auth != null && request.auth.uid == resource.data.PosterID; // Allow users to update/delete their own posts
   }

        match /exchangeTransactions/{transactionId} {
      allow read: if request.auth != null && 
                (request.auth.uid == resource.data.User1ID || 
                 request.auth.uid == resource.data.User2ID);
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                  (request.auth.uid == resource.data.User1ID || 
                   request.auth.uid == resource.data.User2ID);
    }
    
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.UserID;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.UserID;
    }
 }
}