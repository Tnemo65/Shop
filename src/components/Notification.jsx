import React from 'react';
import { formatDistanceToNow } from 'date-fns';
import { useNavigate } from 'react-router-dom';

const NotificationItem = ({ notification, onRead }) => {
  const navigate = useNavigate();
  
  if (!notification) {
    return null;
  }
  
  const handleClick = () => {
    // ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
    onRead(notification.id);
    
    // N·∫øu th√¥ng b√°o c√≥ RelatedID, chuy·ªÉn ƒë·∫øn trang ph·∫£n h·ªìi trao ƒë·ªïi
    if (notification.RelatedID) {
      console.log("Notification clicked:", notification); // Th√™m log ƒë·ªÉ debug

      if (notification.Type === 'exchange') {
        console.log("Navigating to exchange response:", notification.RelatedID);
        navigate(`/exchange-response/${notification.RelatedID}`);
      } else if (notification.Type === 'sale') {
        console.log("Navigating to sale response:", notification.RelatedID);
        navigate(`/sale-response/${notification.RelatedID}`);
      } else {
        console.log("Unknown notification type, using default route");
        navigate(`/notification-detail/${notification.id}`);
      }
    }
  };
  
  // H√†m helper ƒë·ªÉ chuy·ªÉn ƒë·ªïi timestamp sang Date m·ªôt c√°ch an to√†n
  const formatCreatedAt = () => {
    try {
      // Ki·ªÉm tra n·∫øu CreatedAt l√† ƒë·ªëi t∆∞·ª£ng Firestore Timestamp
      if (notification.CreatedAt && notification.CreatedAt.toDate) {
        return formatDistanceToNow(notification.CreatedAt.toDate(), { addSuffix: true });
      }
      
      // Ki·ªÉm tra n·∫øu CreatedAt l√† s·ªë (timestamp)
      if (notification.CreatedAt && typeof notification.CreatedAt.seconds === 'number') {
        return formatDistanceToNow(new Date(notification.CreatedAt.seconds * 1000), { addSuffix: true });
      }
      
      // Tr∆∞·ªùng h·ª£p l√† Date ho·∫∑c string ISO
      if (notification.CreatedAt) {
        return formatDistanceToNow(new Date(notification.CreatedAt), { addSuffix: true });
      }
      
      return 'kh√¥ng x√°c ƒë·ªãnh';
    } catch (error) {
      console.error('Error formatting date:', error);
      return 'kh√¥ng x√°c ƒë·ªãnh';
    }
  };
  
  return (
    <div 
      className={`p-4 border-b ${notification.IsRead ? 'bg-white' : 'bg-blue-50'} cursor-pointer hover:bg-gray-100`}
      onClick={handleClick}
    >
      <div className="flex items-start">
        <div className="mr-3 text-xl">
          üîî
        </div>
        <div className="flex-1">
          <p className="text-gray-800">{notification.Message}</p>
          <p className="text-xs text-gray-500 mt-1">
            {formatCreatedAt()}
          </p>
          {notification.RelatedID && (
            <p className="text-xs text-blue-500 mt-1">Nh·∫•n ƒë·ªÉ xem chi ti·∫øt</p>
          )}
        </div>
        {!notification.IsRead && (
          <div className="w-2 h-2 rounded-full bg-blue-500"></div>
        )}
      </div>
    </div>
  );
};

export default NotificationItem;